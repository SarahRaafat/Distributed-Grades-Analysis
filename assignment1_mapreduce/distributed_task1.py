# -*- coding: utf-8 -*-
"""Distributed Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vNEnj0T0WZ2tdxSbQNjIdxwlGd8Bcer7
"""

!pip install mrjob

from google.colab import files

# Upload coursegrades.txt
uploaded = files.upload()

# Verify upload
filename = "coursegrades.txt"
with open(filename, "r") as file:
    print(file.read())

from collections import defaultdict

# Read file and process data
def read_data(filename):
    data = []
    with open(filename, "r") as file:
        for line in file:
            parts = [p.strip() for p in line.split(",")]
            if len(parts) == 4:
                year, course, grade, university = parts
                data.append((course, int(grade)))
    return data

# Mapper
def map_courses(data):
    mapped_data = defaultdict(list)
    for course, grade in data:
        mapped_data[course].append(grade)
    return mapped_data

# Reducer
def reduce_courses(mapped_data):
    reduced_data = {course: sum(grades) / len(grades) for course, grades in mapped_data.items()}
    return reduced_data

# Run MapReduce
data = read_data(filename)
mapped_data = map_courses(data)
reduced_data = reduce_courses(mapped_data)

# Display Results
print("Average Grade per Course:")
for course, avg in reduced_data.items():
    print(f"{course}, {avg:.2f}")

# Read file and process data
def read_data_university(filename):
    data = []
    with open(filename, "r") as file:
        for line in file:
            parts = [p.strip() for p in line.split(",")]
            if len(parts) == 4:
                year, course, grade, university = parts
                data.append((university, int(grade)))
    return data

# Mapper
def map_universities(data):
    mapped_data = defaultdict(list)
    for university, grade in data:
        mapped_data[university].append(grade)
    return mapped_data

# Reducer
def reduce_universities(mapped_data):
    reduced_data = {university: sum(grades) / len(grades) for university, grades in mapped_data.items()}
    return reduced_data

# Run MapReduce
data = read_data_university(filename)
mapped_data = map_universities(data)
reduced_data = reduce_universities(mapped_data)

# Display Results
print("\nAverage Grade per University:")
for university, avg in reduced_data.items():
    print(f"{university}, {avg:.2f}")

# Read file and process data
def read_data_year(filename):
    data = []
    with open(filename, "r") as file:
        for line in file:
            parts = [p.strip() for p in line.split(",")]
            if len(parts) == 4:
                year, course, grade, university = parts
                data.append((year, int(grade)))
    return data

# Mapper
def map_years(data):
    mapped_data = defaultdict(list)
    for year, grade in data:
        mapped_data[year].append(grade)
    return mapped_data

# Reducer
def reduce_years(mapped_data):
    reduced_data = {year: sorted(grades, reverse=True)[:3] for year, grades in mapped_data.items()}
    return reduced_data

# Run MapReduce
data = read_data_year(filename)
mapped_data = map_years(data)
reduced_data = reduce_years(mapped_data)

# Display Results
print("\nTop 3 Highest Grades per Year:")
for year, top_grades in reduced_data.items():
    print(f"{year}, {top_grades}")

# Save results to files

# Saving Course Averages
with open("C:\Users\Sara\OneDrive\Desktop\Distributed-Grades-Analysis\Distributed-Grades-Analysis\dataset\coursegrades.txt", "w") as f:
    for course, avg in reduce_courses(mapped_data).items():
        f.write(f"{course}, {avg:.2f}\n")

# Saving University Averages
with open("average_university_grades.txt", "w") as f:
    for university, avg in reduce_universities(mapped_data).items():
        f.write(f"{university}, {avg:.2f}\n")

# Saving Top 3 Grades Per Year
with open("top3_grades_per_year.txt", "w") as f:
    for year, grades in reduce_years(mapped_data).items():
        f.write(f"{year}, {', '.join(map(str, grades))}\n")  # Convert list to comma-separated string

import shutil

# Create a zip file
shutil.make_archive("submission", "zip", root_dir=".")

# Download the zip file
files.download("submission.zip")